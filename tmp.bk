/*return val:0-exit success
 * 	     1-exit oid or session error
 * 	     2-packet error
 */

int    snmp_walk(netsnmp_host *host,netsnmp_oid *node)
{
    netsnmp_pdu    *pdu, *response;
    netsnmp_variable_list *vars;
  //  oid             objid_mib[] = { 1, 3, 6, 1, 2, 1 };
    //int             numprinted = 0;

	netsnmp_oid    name;
	oid             end_oid[MAX_OID_LEN];
	size_t          end_len = 0;
	int             count;
	int             running;
	int             status = STAT_ERROR;
	int 		check=!0;
	int             exitval = 0;
	/*
	* get the initial object and subtree
	*/
	if(host==NULL){snmp_perror("snmp_walk hsot");return -1;}
	if(node->oidlen>0){//use node oid first
	  end_len=node->oidlen;
	  memmove(end_oid,node->node_oid, sizeof(node->node_oid));
	}
	else if (node->name){
	        end_len = MAX_OID_LEN;
		if (snmp_parse_oid(node->name, end_oid, &end_len) == NULL) {
			snmp_perror(host->name);
			exit(1);
		}
	}	  
	else if (host->hoid.oidlen>0) {//node is empty,then use host oid info
		/*
		* specified oid in the struct snmp_host
		*/
		end_len = host->hoid.oidlen;
		for( count=0;count<end_len;count++)end_oid[count]=host->hoid.node_oid[count];
	}
	else if(host->hoid.name){
	        end_len = MAX_OID_LEN;
		if (snmp_parse_oid(host->hoid.name, end_oid, &end_len) == NULL) {
			snmp_perror(host->hoid.name);
			exit(1);
		}
	}
	else {
		/*
		* use default value
		*/
		memmove(end_oid, Objid_mib, sizeof(Objid_mib));
		end_len = sizeof(Objid_mib) / sizeof(oid);
	}

	SOCK_STARTUP;//linux :null,win32 :winsock_startup()

	/*
	* open an SNMP session
	*/
	if (host->ss == NULL) {
		/*
		* diagnose snmp_open errors with the input netsnmp_session pointer
		*/
		snmp_sess_perror("snmpwalk:host seesion not init", NULL);
		SOCK_CLEANUP;
		exit(1);
	}
	/*
	* get first object to start walk
	*/
	memmove(name.node_oid, end_oid, end_len * sizeof(oid));
	name.oidlen = end_len;
	response=snmp_get(host,&name);
	handle_response(host,&response);
	running = 1;
	
	while (running) {
		/*
		* create PDU for GETNEXT request and add object name to request
		*/
		pdu = snmp_pdu_create(SNMP_MSG_GETNEXT);
		snmp_add_null_var(pdu, name.node_oid, name.oidlen);
		/*
		* do the request
		*/
		status = snmp_synch_response(host->ss, pdu, &response); 
		if (status == STAT_SUCCESS) {
			if (response->errstat == SNMP_ERR_NOERROR) {
				/*
				* check resulting variables
				*/
				//
				for (vars = response->variables; vars;
					vars = vars->next_variable) {
				       //if(response)printf("testi===============\n");
					if (snmp_oid_compare(end_oid, end_len,
						vars->name, end_len) < 0) {
						/*
						* not part of this subtree
						*/						
						running = 0;
						continue;
					}
					//if(response)printf("testi===============\n");
					//print_variable(vars->name, vars->name_length, vars);
					if ((vars->type != SNMP_ENDOFMIBVIEW) &&
						(vars->type != SNMP_NOSUCHOBJECT) &&
						(vars->type != SNMP_NOSUCHINSTANCE)) {
						/*
						* not an exception value
						*/
						if (check
							&& snmp_oid_compare(name.node_oid, name.oidlen,
							vars->name,
							vars->name_length) >= 0) {
							fprintf(stderr, "Error: OID not increasing: ");
							fprint_objid(stderr, name.node_oid, name.oidlen);
							fprintf(stderr, " >= ");
							fprint_objid(stderr, vars->name,
								vars->name_length);
							fprintf(stderr, "\n");
							running = 0;
							exitval = 1;
						}
						//if(response)printf("testing+0===============\n");
						memmove((char *)name.node_oid, (char *)vars->name,
							vars->name_length * sizeof(oid));
						name.oidlen = vars->name_length;
					}
					else
						/*
						* an exception value, so stop
						*/
						running = 0;
				}
				//printf("testing+1==for parse=============\n");
				if(running)handle_response(host,&response);
			}
			else {
				/*
				* error in response, print it
				*/
				running = 0;
				if (response->errstat == SNMP_ERR_NOSUCHNAME) {
					printf("End of MIB\n");
				}
				else {
					fprintf(stderr, "Error in packet.\nReason: %s\n",
						snmp_errstring(response->errstat));
					if (response->errindex != 0) {
						fprintf(stderr, "Failed object: ");
						for (count = 1, vars = response->variables;
							vars && count != response->errindex;
							vars = vars->next_variable, count++)
							/*EMPTY*/;
						if (vars)
							fprint_objid(stderr, vars->name,
							vars->name_length);
						fprintf(stderr, "\n");
					}
					exitval = 2;
				}
			}
		}
		else if (status == STAT_TIMEOUT) {
			fprintf(stderr, "Timeout: No Response from %s\n",
				host->ss->peername);
			running = 0;
			exitval = 1;
		}
		else {                /* status == STAT_ERROR */
			snmp_sess_perror("snmpwalk", host->ss);
			running = 0;
			exitval = 1;
		}
		if (response)
			snmp_free_pdu(response);
	}
	/*if (netsnmp_ds_get_boolean(NETSNMP_DS_APPLICATION_ID,
		NETSNMP_DS_WALK_PRINT_STATISTICS)) {
		printf("Variables found: %s\n", );
	}*/
	return  exitval;
}
